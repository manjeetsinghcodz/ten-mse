### CI - CD Pipeline

name: Flask App Deployment

on:
  push:  #Trigger the workflow during a push on branch develop and branches
    branches:
      - develop
      - 'feat/**'
    paths:
      - 'app/**'
      - 'test/**'
    path_ignore:
      - 'deploy/**'
      - '.terraform/**'
env:
   REGISTRY: 976201004822.dkr.ecr.ap-southeast-2.amazonaws.com   #My ECR Registry URL define in ENV to be use during docker command
   REPO: ten-mse # My ECR repo name defined in ENV to be used during docker command
   TAG: v${{ github.run_number }} # Take the github run number as image tag
jobs:
  BUILD: # Name of the job BUILD
    runs-on: ubuntu-latest #Workflow Agent node operating system is ubuntu

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3  #Checkout code into agent node

    - name: Set up Python
      uses: actions/setup-python@v3 #Install python 3.10
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: | #Install flake and pytest for testing the code , install dependency e.g flask, serverless-wgsi
        python -m pip install --upgrade pip
        pip install flake8 pytest 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with Pytest
      run: | # Run pytest to check if the index return OK
        # Export env pythonpath into the runner so that my test.py script check app.py which is located in ./app
        export PYTHONPATH=app 
        pytest

    - name: Setup docker
      uses: docker/setup-buildx-action@v2

    - name: Configure Registry Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} #user ten-ci key id to perform ECR login
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # user ten-co key to perform ECR login
        aws-region: ap-southeast-2

    - name: Build Docker Image
      run: | # build the docker image with env described on top.
        docker build -t ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }} . 

    - name: Post Event Test on Running Container
      run: | #Run the container on the runner and test event returning 200 with curl command . If return not 200 , build will fail
        docker run -dit --rm -p 9000:8080 ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }}
        sleep 2s
        if [ $(curl -s -o /dev/null -w "%{http_code}" -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}') -ne 200 ]; then echo "Container KO !"; exit 1; fi

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Publish to ECR
      run: | # Push the image into ECR with the env variables declared on top.
        docker push ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }}

  DEPLOY:
    runs-on: ubuntu-latest
    needs: BUILD # will run this job only after BUILD job is completed successfully

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
    - name: Install Terraform
      run: | # install the latest version of terraform with apt on the ubuntu runner
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./deploy #change to ./deploy dir , all tf files are in that directory
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} #load user ten-ci access key and id from secret to execute terraform command init
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #load user ten-ci access key and id from secret to execute terraform command init
      run: | #Export the aws provider credentials into the bash env of ubuntu runner so that terraform can authenticate with AWS
        export AWS_SECRET_ACCESS_KEY=${{ secrets.TF_KEY }} 
        export AWS_ACCESS_KEY_ID=${{ secrets.TF_ID }}
        export AWS_PROFILE=default
        terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} #load user ten-ci access key and id from secret to execute terraform command plan
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #load user ten-ci access key and id from secret to execute terraform command plan
      run: | #Run terraform plan with variable(img_tag) from variable.tf to replace with the value of the run_id of the workflow 
        terraform plan -var "img_tag=${{ env.TAG }}" 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} #load user ten-ci access key and id from secret to execute terraform apply
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #load user ten-ci access key and id from secret to execute terraform apply
      run: | #Run terraform apply with variable(img_tag) declared in variable.tf to be replace with the value of the run_id of the workflow 
        terraform apply -auto-approve -var "img_tag=${{ env.TAG }}"
