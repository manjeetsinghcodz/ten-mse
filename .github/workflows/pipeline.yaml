### Initial Continuous integration.
### Checkout the code into ubuntu node, install the necessary packages required by python, and perform the test with pytest

name: Flask App Deployment

on:
  push:
    branches:
      - develop
      - 'feat/**'
env:
   REGISTRY: 976201004822.dkr.ecr.ap-southeast-2.amazonaws.com
   REPO: ten-mse
   TAG: v${{ github.run_number }}
jobs:
  BUILD:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with Pytest
      run: |
        export PYTHONPATH=app
        pytest

    - name: Setup docker
      uses: docker/setup-buildx-action@v2

    - name: Configure Registry Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Build Docker Image
      run: |
        docker build -t ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }} .

    - name: Test Running Container
      run: |
        docker run -dit --rm -p 80:8080 ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }}
        sleep 2s
        #if [ "$(curl -sb -H "Accept: application/json" "http://127.0.0.1/health_check")" != "OK" ]; then echo "Container KO !"; exit 1; fi

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Publish to ECR
      run: |
        docker push ${{ env.REGISTRY}}/${{ env.REPO }}:${{ env.TAG }}

